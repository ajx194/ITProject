import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './filesaver.service';
import * as ɵngcc2 from '@angular/common/http';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Directive, ElementRef, Input, HostListener, EventEmitter, Output } from '@angular/core';
import { HttpClient, HttpParams, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { FileSaverService } from './filesaver.service';
var FileSaverDirective = /** @class */ (function () {
    function FileSaverDirective(el, fss, httpClient) {
        this.el = el;
        this.fss = fss;
        this.httpClient = httpClient;
        this.method = 'GET';
        this.success = new EventEmitter();
        this.error = new EventEmitter();
        if (!fss.isFileSaverSupported) {
            el.nativeElement.classList.add("filesaver__not-support");
        }
    }
    FileSaverDirective.prototype.getName = function (res) {
        return decodeURI(this.fileName || res.headers.get('filename') || res.headers.get('x-filename'));
    };
    FileSaverDirective.prototype._click = function () {
        var _this = this;
        if (!this.fss.isFileSaverSupported) {
            return;
        }
        var req = this.http;
        if (!req) {
            var params = new HttpParams();
            var query = this.query || {};
            // tslint:disable-next-line:forin
            for (var item in query) {
                params.set(item, query[item]);
            }
            req = this.httpClient.request(this.method, this.url, {
                observe: 'response',
                responseType: 'blob',
                headers: this.header,
                params: params,
            });
        }
        this.setDisabled(true);
        req.subscribe(function (res) {
            if (res.status !== 200 || res.body.size <= 0) {
                _this.error.emit(res);
                return;
            }
            _this.fss.save(res.body, _this.getName(res), null, _this.fsOptions);
            _this.success.emit(res);
        }, function (err) { return _this.error.emit(err); }, function () { return _this.setDisabled(false); });
    };
    FileSaverDirective.prototype.setDisabled = function (status) {
        var el = this.el.nativeElement;
        el.disabled = status;
        el.classList[status ? 'add' : 'remove']("filesaver__disabled");
    };
    FileSaverDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: FileSaverService },
        { type: HttpClient }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], FileSaverDirective.prototype, "method", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Observable)
    ], FileSaverDirective.prototype, "http", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], FileSaverDirective.prototype, "query", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], FileSaverDirective.prototype, "header", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], FileSaverDirective.prototype, "url", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], FileSaverDirective.prototype, "fileName", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], FileSaverDirective.prototype, "fsOptions", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], FileSaverDirective.prototype, "success", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], FileSaverDirective.prototype, "error", void 0);
    __decorate([
        HostListener('click'),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], FileSaverDirective.prototype, "_click", null);
    FileSaverDirective = __decorate([ __metadata("design:paramtypes", [ElementRef, FileSaverService, HttpClient])
    ], FileSaverDirective);
FileSaverDirective.ɵfac = function FileSaverDirective_Factory(t) { return new (t || FileSaverDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FileSaverService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.HttpClient)); };
FileSaverDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: FileSaverDirective, selectors: [["", "fileSaver", ""]], hostBindings: function FileSaverDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function FileSaverDirective_click_HostBindingHandler() { return ctx._click(); });
    } }, inputs: { method: "method", http: "http", query: "query", header: "header", url: "url", fileName: "fileName", fsOptions: "fsOptions" }, outputs: { success: "success", error: "error" }, exportAs: ["fileSaver"] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FileSaverDirective, [{
        type: Directive,
        args: [{
                selector: '[fileSaver]',
                exportAs: 'fileSaver'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.FileSaverService }, { type: ɵngcc2.HttpClient }]; }, { method: [{
            type: Input
        }], success: [{
            type: Output
        }], error: [{
            type: Output
        }], _click: [{
            type: HostListener,
            args: ['click']
        }], http: [{
            type: Input
        }], query: [{
            type: Input
        }], header: [{
            type: Input
        }], url: [{
            type: Input
        }], fileName: [{
            type: Input
        }], fsOptions: [{
            type: Input
        }] }); })();
    return FileSaverDirective;
}());
export { FileSaverDirective };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXNhdmVyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsibmd4LWZpbGVzYXZlci9zcmMvZmlsZXNhdmVyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsWUFBWSxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDakcsT0FBTyxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDNUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUVsQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQU12RDtBQUNvQixJQVVsQiw0QkFBb0IsRUFBaUMsRUFBVSxHQUFxQixFQUFVLFVBQXNCO0FBQ3RILFFBRHNCLE9BQUUsR0FBRixFQUFFLENBQStCO0FBQUMsUUFBUyxRQUFHLEdBQUgsR0FBRyxDQUFrQjtBQUFDLFFBQVMsZUFBVSxHQUFWLFVBQVUsQ0FBWTtBQUFDLFFBVjVHLFdBQU0sR0FBRyxLQUFLLENBQUM7QUFDMUIsUUFNcUIsWUFBTyxHQUFHLElBQUksWUFBWSxFQUFzQixDQUFDO0FBQ3RFLFFBQXFCLFVBQUssR0FBRyxJQUFJLFlBQVksRUFBTyxDQUFDO0FBQ3JELFFBRUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsRUFBRTtBQUNuQyxZQUFNLEVBQUUsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0FBQy9ELFNBQUs7QUFDTCxJQUFFLENBQUM7QUFDSCxJQUNVLG9DQUFPLEdBQWYsVUFBZ0IsR0FBdUI7QUFDekMsUUFBSSxPQUFPLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxJQUFJLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEdB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RUFBRTtBQUFFO0FBRUwscURBRmU7QUFDckIsSUFBVTtBQUNYLFFBREcsS0FBSyxFQUFFO0FBQUU7QUFFTixzREFGaUI7QUFDdEIsSUFBVTtBQUNYLFFBREcsS0FBSyxFQUFFO0FBQUU7QUFFWCxtREFGc0I7QUFDdEIsSUFBVTtBQUFhLFFBQXJCLEtBQUssRUFBRTtBQUFFO0FBQ2Esd0RBREc7QUFDM0IsSUFBVTtBQUFhLFFBQXJCLEtBQUssRUFBRTtBQUFFO0FBQ0UseURBRHlCO0FBQ3RDLElBQVc7QUFBYSxRQUF0QixNQUFNLEVBQUU7QUFBRTtBQUEwQyx1REFBZTtBQUNyRSxJQUFXO0FBQWEsUUFBdEIsTUFBTSxFQUFFO0FBQUU7QUFFYixxREFGcUQ7QUFFckQsSUFXRTtBQUNBLFFBRkMsWUFBWSxDQUFDLE9BQU8sQ0FBQztBQUN2QjtBQUNnQztBQUdqQjtBQUVPLG9EQTRCcEI7QUFFSCxJQTFEYSxrQkFBa0Isd0JBSjlCLFNBQVMsQ0FBQyxjQUNULFFBQVEsRUFBRSxhQUFhLGNBQ3ZCLHRFQUVNLGtDQVdrQixVQUFVLEVBQWtDLGdCQUFnQixFQUFzQixVQUFVO0NBYjVHLEVBQUUsV0FBVyxXQUN0QixDQUFDLDFCQVl1SCxPQVg1RyxrQkFBa0IsQ0ErRDlCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQkFDRDtBQUFDLElBREQseUJBQUM7QUFDQSxDQURBLEFBL0RELElBK0RDO0FBQ0QsU0FoRWEsa0JBQWtCO0FBQzlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBJbnB1dCwgSG9zdExpc3RlbmVyLCBFdmVudEVtaXR0ZXIsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSHR0cENsaWVudCwgSHR0cFBhcmFtcywgSHR0cFJlc3BvbnNlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgRmlsZVNhdmVyT3B0aW9ucyB9IGZyb20gJ2ZpbGUtc2F2ZXInO1xuaW1wb3J0IHsgRmlsZVNhdmVyU2VydmljZSB9IGZyb20gJy4vZmlsZXNhdmVyLnNlcnZpY2UnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbZmlsZVNhdmVyXScsXG4gIGV4cG9ydEFzOiAnZmlsZVNhdmVyJyxcbn0pXG5leHBvcnQgY2xhc3MgRmlsZVNhdmVyRGlyZWN0aXZlIHtcbiAgQElucHV0KCkgbWV0aG9kID0gJ0dFVCc7XG4gIEBJbnB1dCgpIGh0dHA6IE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPEJsb2I+PjtcbiAgQElucHV0KCkgcXVlcnk6IGFueTtcbiAgQElucHV0KCkgaGVhZGVyOiBhbnk7XG4gIEBJbnB1dCgpIHVybDogc3RyaW5nO1xuICBASW5wdXQoKSBmaWxlTmFtZTogc3RyaW5nO1xuICBASW5wdXQoKSBmc09wdGlvbnM6IEZpbGVTYXZlck9wdGlvbnM7XG4gIEBPdXRwdXQoKSByZWFkb25seSBzdWNjZXNzID0gbmV3IEV2ZW50RW1pdHRlcjxIdHRwUmVzcG9uc2U8QmxvYj4+KCk7XG4gIEBPdXRwdXQoKSByZWFkb25seSBlcnJvciA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWw6IEVsZW1lbnRSZWY8SFRNTEJ1dHRvbkVsZW1lbnQ+LCBwcml2YXRlIGZzczogRmlsZVNhdmVyU2VydmljZSwgcHJpdmF0ZSBodHRwQ2xpZW50OiBIdHRwQ2xpZW50KSB7XG4gICAgaWYgKCFmc3MuaXNGaWxlU2F2ZXJTdXBwb3J0ZWQpIHtcbiAgICAgIGVsLm5hdGl2ZUVsZW1lbnQuY2xhc3NMaXN0LmFkZChgZmlsZXNhdmVyX19ub3Qtc3VwcG9ydGApO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZ2V0TmFtZShyZXM6IEh0dHBSZXNwb25zZTxCbG9iPikge1xuICAgIHJldHVybiBkZWNvZGVVUkkodGhpcy5maWxlTmFtZSB8fCByZXMuaGVhZGVycy5nZXQoJ2ZpbGVuYW1lJykgfHwgcmVzLmhlYWRlcnMuZ2V0KCd4LWZpbGVuYW1lJykpO1xuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcignY2xpY2snKVxuICBfY2xpY2soKSB7XG4gICAgaWYgKCF0aGlzLmZzcy5pc0ZpbGVTYXZlclN1cHBvcnRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgcmVxID0gdGhpcy5odHRwO1xuICAgIGlmICghcmVxKSB7XG4gICAgICBjb25zdCBwYXJhbXMgPSBuZXcgSHR0cFBhcmFtcygpO1xuICAgICAgY29uc3QgcXVlcnkgPSB0aGlzLnF1ZXJ5IHx8IHt9O1xuICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmZvcmluXG4gICAgICBmb3IgKGNvbnN0IGl0ZW0gaW4gcXVlcnkpIHtcbiAgICAgICAgcGFyYW1zLnNldChpdGVtLCBxdWVyeVtpdGVtXSk7XG4gICAgICB9XG5cbiAgICAgIHJlcSA9IHRoaXMuaHR0cENsaWVudC5yZXF1ZXN0KHRoaXMubWV0aG9kLCB0aGlzLnVybCwge1xuICAgICAgICBvYnNlcnZlOiAncmVzcG9uc2UnLFxuICAgICAgICByZXNwb25zZVR5cGU6ICdibG9iJyxcbiAgICAgICAgaGVhZGVyczogdGhpcy5oZWFkZXIsXG4gICAgICAgIHBhcmFtcyxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHRoaXMuc2V0RGlzYWJsZWQodHJ1ZSk7XG4gICAgcmVxLnN1YnNjcmliZShcbiAgICAgIHJlcyA9PiB7XG4gICAgICAgIGlmIChyZXMuc3RhdHVzICE9PSAyMDAgfHwgcmVzLmJvZHkuc2l6ZSA8PSAwKSB7XG4gICAgICAgICAgdGhpcy5lcnJvci5lbWl0KHJlcyk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZnNzLnNhdmUocmVzLmJvZHksIHRoaXMuZ2V0TmFtZShyZXMpLCBudWxsLCB0aGlzLmZzT3B0aW9ucyk7XG4gICAgICAgIHRoaXMuc3VjY2Vzcy5lbWl0KHJlcyk7XG4gICAgICB9LFxuICAgICAgZXJyID0+IHRoaXMuZXJyb3IuZW1pdChlcnIpLFxuICAgICAgKCkgPT4gdGhpcy5zZXREaXNhYmxlZChmYWxzZSksXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgc2V0RGlzYWJsZWQoc3RhdHVzOiBib29sZWFuKSB7XG4gICAgY29uc3QgZWwgPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQ7XG4gICAgZWwuZGlzYWJsZWQgPSBzdGF0dXM7XG4gICAgZWwuY2xhc3NMaXN0W3N0YXR1cyA/ICdhZGQnIDogJ3JlbW92ZSddKGBmaWxlc2F2ZXJfX2Rpc2FibGVkYCk7XG4gIH1cbn1cbiJdfQ==