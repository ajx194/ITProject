import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './filesaver.service';
import * as ɵngcc2 from '@angular/common/http';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Directive, ElementRef, Input, HostListener, EventEmitter, Output } from '@angular/core';
import { HttpClient, HttpParams, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { FileSaverService } from './filesaver.service';
let FileSaverDirective = class FileSaverDirective {
    constructor(el, fss, httpClient) {
        this.el = el;
        this.fss = fss;
        this.httpClient = httpClient;
        this.method = 'GET';
        this.success = new EventEmitter();
        this.error = new EventEmitter();
        if (!fss.isFileSaverSupported) {
            el.nativeElement.classList.add(`filesaver__not-support`);
        }
    }
    getName(res) {
        return decodeURI(this.fileName || res.headers.get('filename') || res.headers.get('x-filename'));
    }
    _click() {
        if (!this.fss.isFileSaverSupported) {
            return;
        }
        let req = this.http;
        if (!req) {
            const params = new HttpParams();
            const query = this.query || {};
            // tslint:disable-next-line:forin
            for (const item in query) {
                params.set(item, query[item]);
            }
            req = this.httpClient.request(this.method, this.url, {
                observe: 'response',
                responseType: 'blob',
                headers: this.header,
                params,
            });
        }
        this.setDisabled(true);
        req.subscribe(res => {
            if (res.status !== 200 || res.body.size <= 0) {
                this.error.emit(res);
                return;
            }
            this.fss.save(res.body, this.getName(res), null, this.fsOptions);
            this.success.emit(res);
        }, err => this.error.emit(err), () => this.setDisabled(false));
    }
    setDisabled(status) {
        const el = this.el.nativeElement;
        el.disabled = status;
        el.classList[status ? 'add' : 'remove'](`filesaver__disabled`);
    }
};
FileSaverDirective.ɵfac = function FileSaverDirective_Factory(t) { return new (t || FileSaverDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FileSaverService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.HttpClient)); };
FileSaverDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: FileSaverDirective, selectors: [["", "fileSaver", ""]], hostBindings: function FileSaverDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function FileSaverDirective_click_HostBindingHandler() { return ctx._click(); });
    } }, inputs: { method: "method", http: "http", query: "query", header: "header", url: "url", fileName: "fileName", fsOptions: "fsOptions" }, outputs: { success: "success", error: "error" }, exportAs: ["fileSaver"] });
FileSaverDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: FileSaverService },
    { type: HttpClient }
];
__decorate([
    Input(),
    __metadata("design:type", Object)
], FileSaverDirective.prototype, "method", void 0);
__decorate([
    Input(),
    __metadata("design:type", Observable)
], FileSaverDirective.prototype, "http", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FileSaverDirective.prototype, "query", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FileSaverDirective.prototype, "header", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], FileSaverDirective.prototype, "url", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], FileSaverDirective.prototype, "fileName", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FileSaverDirective.prototype, "fsOptions", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], FileSaverDirective.prototype, "success", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], FileSaverDirective.prototype, "error", void 0);
__decorate([
    HostListener('click'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], FileSaverDirective.prototype, "_click", null);
FileSaverDirective = __decorate([ __metadata("design:paramtypes", [ElementRef, FileSaverService, HttpClient])
], FileSaverDirective);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FileSaverDirective, [{
        type: Directive,
        args: [{
                selector: '[fileSaver]',
                exportAs: 'fileSaver'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.FileSaverService }, { type: ɵngcc2.HttpClient }]; }, { method: [{
            type: Input
        }], success: [{
            type: Output
        }], error: [{
            type: Output
        }], _click: [{
            type: HostListener,
            args: ['click']
        }], http: [{
            type: Input
        }], query: [{
            type: Input
        }], header: [{
            type: Input
        }], url: [{
            type: Input
        }], fileName: [{
            type: Input
        }], fsOptions: [{
            type: Input
        }] }); })();
export { FileSaverDirective };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXNhdmVyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsibmd4LWZpbGVzYXZlci9zcmMvZmlsZXNhdmVyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsWUFBWSxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDakcsT0FBTyxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDNUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUVsQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQU12RCxJQUFhLGtCQUFrQixHQUEvQixNQUFhLGtCQUFrQjtBQUMvQixJQVVFLFlBQW9CLEVBQWlDLEVBQVUsR0FBcUIsRUFBVSxVQUFzQjtBQUN0SCxRQURzQixPQUFFLEdBQUYsRUFBRSxDQUErQjtBQUFDLFFBQVMsUUFBRyxHQUFILEdBQUcsQ0FBa0I7QUFBQyxRQUFTLGVBQVUsR0FBVixVQUFVLENBQVk7QUFBQyxRQVY1RyxXQUFNLEdBQUcsS0FBSyxDQUFDO0FBQzFCLFFBTXFCLFlBQU8sR0FBRyxJQUFJLFlBQVksRUFBc0IsQ0FBQztBQUN0RSxRQUFxQixVQUFLLEdBQUcsSUFBSSxZQUFZLEVBQU8sQ0FBQztBQUNyRCxRQUVJLElBQUksQ0FBQyxHQUFHLENBQUMsb0JBQW9CLEVBQUU7QUFDbkMsWUFBTSxFQUFFLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsd0JBQXdCLENBQUMsQ0FBQztBQUMvRCxTQUFLO0FBQ0wsSUFBRSxDQUFDO0FBQ0gsSUFDVSxPQUFPLENBQUMsR0FBdUI7QUFDekMsUUFBSSxPQUFPLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxJQUFJLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxD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WCxJQURHLEtBQUssRUFBRTtBQUFFO0FBRVYsa0RBRnFCO0FBQ1o7QUFDWCxJQURHLEtBQUssRUFBRTtBQUFFO0FBQ2MsK0NBREg7QUFDWjtBQUFhLElBQXJCLEtBQUssRUFBRTtBQUFFO0FBQ1Msb0RBRE87QUFDakI7QUFBYSxJQUFyQixLQUFLLEVBQUU7QUFBRTtBQUNGLHFEQUQ2QjtBQUMzQjtBQUFhLElBQXRCLE1BQU0sRUFBRTtBQUFFO0FBQXNDLG1EQUFtQjtBQUMxRDtBQUFhLElBQXRCLE1BQU0sRUFBRTtBQUFFO0FBQXNDLGlEQUFFO0FBYW5EO0FBQ0EsSUFGQyxZQUFZLENBQUMsT0FBTyxDQUFDO0FBQ3ZCO0FBQzRCO0FBR3JCO0FBRUcsZ0RBNEJSO0FBeERVLGtCQUFrQixvQkFKOUIsU0FBUyxDQUFDLFVBQ1QsUUFBUSxFQUFFLGFBQWEsVUFDdkIsUUFBUSxFQUFFLHBFQUVSLGtDQVdzQixVQUFVLEVBQWtDLGdCQUFnQixFQUFzQixVQUFVO0VBYi9GLE9BQ3RCLENBQUMsVkFZdUgsR0FYNUcsa0JBQWtCLENBK0Q5Qjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQkFDRDtBQUFDLFNBaEVZLGtCQUFrQjtBQUM5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSW5wdXQsIEhvc3RMaXN0ZW5lciwgRXZlbnRFbWl0dGVyLCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBQYXJhbXMsIEh0dHBSZXNwb25zZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEZpbGVTYXZlck9wdGlvbnMgfSBmcm9tICdmaWxlLXNhdmVyJztcbmltcG9ydCB7IEZpbGVTYXZlclNlcnZpY2UgfSBmcm9tICcuL2ZpbGVzYXZlci5zZXJ2aWNlJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2ZpbGVTYXZlcl0nLFxuICBleHBvcnRBczogJ2ZpbGVTYXZlcicsXG59KVxuZXhwb3J0IGNsYXNzIEZpbGVTYXZlckRpcmVjdGl2ZSB7XG4gIEBJbnB1dCgpIG1ldGhvZCA9ICdHRVQnO1xuICBASW5wdXQoKSBodHRwOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxCbG9iPj47XG4gIEBJbnB1dCgpIHF1ZXJ5OiBhbnk7XG4gIEBJbnB1dCgpIGhlYWRlcjogYW55O1xuICBASW5wdXQoKSB1cmw6IHN0cmluZztcbiAgQElucHV0KCkgZmlsZU5hbWU6IHN0cmluZztcbiAgQElucHV0KCkgZnNPcHRpb25zOiBGaWxlU2F2ZXJPcHRpb25zO1xuICBAT3V0cHV0KCkgcmVhZG9ubHkgc3VjY2VzcyA9IG5ldyBFdmVudEVtaXR0ZXI8SHR0cFJlc3BvbnNlPEJsb2I+PigpO1xuICBAT3V0cHV0KCkgcmVhZG9ubHkgZXJyb3IgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsOiBFbGVtZW50UmVmPEhUTUxCdXR0b25FbGVtZW50PiwgcHJpdmF0ZSBmc3M6IEZpbGVTYXZlclNlcnZpY2UsIHByaXZhdGUgaHR0cENsaWVudDogSHR0cENsaWVudCkge1xuICAgIGlmICghZnNzLmlzRmlsZVNhdmVyU3VwcG9ydGVkKSB7XG4gICAgICBlbC5uYXRpdmVFbGVtZW50LmNsYXNzTGlzdC5hZGQoYGZpbGVzYXZlcl9fbm90LXN1cHBvcnRgKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGdldE5hbWUocmVzOiBIdHRwUmVzcG9uc2U8QmxvYj4pIHtcbiAgICByZXR1cm4gZGVjb2RlVVJJKHRoaXMuZmlsZU5hbWUgfHwgcmVzLmhlYWRlcnMuZ2V0KCdmaWxlbmFtZScpIHx8IHJlcy5oZWFkZXJzLmdldCgneC1maWxlbmFtZScpKTtcbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJylcbiAgX2NsaWNrKCkge1xuICAgIGlmICghdGhpcy5mc3MuaXNGaWxlU2F2ZXJTdXBwb3J0ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IHJlcSA9IHRoaXMuaHR0cDtcbiAgICBpZiAoIXJlcSkge1xuICAgICAgY29uc3QgcGFyYW1zID0gbmV3IEh0dHBQYXJhbXMoKTtcbiAgICAgIGNvbnN0IHF1ZXJ5ID0gdGhpcy5xdWVyeSB8fCB7fTtcbiAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpmb3JpblxuICAgICAgZm9yIChjb25zdCBpdGVtIGluIHF1ZXJ5KSB7XG4gICAgICAgIHBhcmFtcy5zZXQoaXRlbSwgcXVlcnlbaXRlbV0pO1xuICAgICAgfVxuXG4gICAgICByZXEgPSB0aGlzLmh0dHBDbGllbnQucmVxdWVzdCh0aGlzLm1ldGhvZCwgdGhpcy51cmwsIHtcbiAgICAgICAgb2JzZXJ2ZTogJ3Jlc3BvbnNlJyxcbiAgICAgICAgcmVzcG9uc2VUeXBlOiAnYmxvYicsXG4gICAgICAgIGhlYWRlcnM6IHRoaXMuaGVhZGVyLFxuICAgICAgICBwYXJhbXMsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLnNldERpc2FibGVkKHRydWUpO1xuICAgIHJlcS5zdWJzY3JpYmUoXG4gICAgICByZXMgPT4ge1xuICAgICAgICBpZiAocmVzLnN0YXR1cyAhPT0gMjAwIHx8IHJlcy5ib2R5LnNpemUgPD0gMCkge1xuICAgICAgICAgIHRoaXMuZXJyb3IuZW1pdChyZXMpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmZzcy5zYXZlKHJlcy5ib2R5LCB0aGlzLmdldE5hbWUocmVzKSwgbnVsbCwgdGhpcy5mc09wdGlvbnMpO1xuICAgICAgICB0aGlzLnN1Y2Nlc3MuZW1pdChyZXMpO1xuICAgICAgfSxcbiAgICAgIGVyciA9PiB0aGlzLmVycm9yLmVtaXQoZXJyKSxcbiAgICAgICgpID0+IHRoaXMuc2V0RGlzYWJsZWQoZmFsc2UpLFxuICAgICk7XG4gIH1cblxuICBwcml2YXRlIHNldERpc2FibGVkKHN0YXR1czogYm9vbGVhbikge1xuICAgIGNvbnN0IGVsID0gdGhpcy5lbC5uYXRpdmVFbGVtZW50O1xuICAgIGVsLmRpc2FibGVkID0gc3RhdHVzO1xuICAgIGVsLmNsYXNzTGlzdFtzdGF0dXMgPyAnYWRkJyA6ICdyZW1vdmUnXShgZmlsZXNhdmVyX19kaXNhYmxlZGApO1xuICB9XG59XG4iXX0=