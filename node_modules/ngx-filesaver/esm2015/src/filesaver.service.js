import * as ɵngcc0 from '@angular/core';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Injectable } from '@angular/core';
import { saveAs } from 'file-saver';
import * as i0 from "@angular/core";
let FileSaverService = class FileSaverService {
    get isFileSaverSupported() {
        try {
            return !!new Blob();
        }
        catch (e) {
            return false;
        }
    }
    genType(fileName) {
        if (!fileName || fileName.lastIndexOf('.') === -1) {
            return 'text/plain';
        }
        const type = fileName.substr(fileName.lastIndexOf('.') + 1);
        switch (type) {
            case 'txt':
                return 'text/plain';
            case 'xml':
            case 'html':
                return `text/${type}`;
            case 'json':
                return 'octet/stream';
            default:
                return `application/${type}`;
        }
    }
    save(blob, fileName, filtType, option) {
        if (!blob) {
            throw new Error('Data argument should be a blob instance');
        }
        const file = new Blob([blob], { type: filtType || blob.type || this.genType(fileName) });
        saveAs(file, decodeURI(fileName || 'download'), option);
    }
    saveText(txt, fileName, option) {
        const blob = new Blob([txt]);
        this.save(blob, fileName, null, option);
    }
};
FileSaverService.ɵfac = function FileSaverService_Factory(t) { return new (t || FileSaverService)(); };
FileSaverService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: FileSaverService, factory: function (t) { return FileSaverService.ɵfac(t); }, providedIn: 'root' });
FileSaverService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function FileSaverService_Factory() { return new FileSaverService(); }, token: FileSaverService, providedIn: "root" });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FileSaverService, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], null, null); })();
export { FileSaverService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXNhdmVyLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIm5neC1maWxlc2F2ZXIvc3JjL2ZpbGVzYXZlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxNQUFNLEVBQW9CLE1BQU0sWUFBWSxDQUFDO0FBQ3REO0FBRUEsSUFBYSxnQkFBZ0IsR0FBN0IsTUFBYSxnQkFBZ0I7QUFDN0IsSUFBRSxJQUFJLG9CQUFvQjtBQUFLLFFBQzNCLElBQUk7QUFDUixZQUFNLE9BQU8sQ0FBQyxDQUFDLElBQUksSUFBSSxFQUFFLENBQUM7QUFDMUIsU0FBSztBQUFDLFFBQUEsT0FBTyxDQUFDLEVBQUU7QUFDaEIsWUFBTSxPQUFPLEtBQUssQ0FBQztBQUNuQixTQUFLO0FBQ0wsSUFBRSxDQUFDO0FBQ0gsSUFDRSxPQUFPLENBQUMsUUFBaUI7QUFBSSxRQUMzQixJQUFJLENBQUMsUUFBUSxJQUFJLFFBQVEsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUU7QUFDdkQsWUFBTSxPQUFPLFlBQVksQ0FBQztBQUMxQixTQUFLO0FBQ0wsUUFBSSxNQUFNLElBQUksR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDaEUsUUFBSSxRQUFRLElBQUksRUFBRTtBQUNsQixZQUFNLEtBQUssS0FBSztBQUNoQixnQkFBUSxPQUFPLFlBQVksQ0FBQztBQUM1QixZQUFNLEtBQUssS0FBSyxDQUFDO0FBQ2pCLFlBQU0sS0FBSyxNQUFNO0FBQ2pCLGdCQUFRLE9BQU8sUUFBUSxJQUFJLEVBQUUsQ0FBQztBQUM5QixZQUFNLEtBQUssTUFBTTtBQUNqQixnQkFBUSxPQUFPLGNBQWMsQ0FBQztBQUM5QixZQUFNO0FBQ04sZ0JBQVEsT0FBTyxlQUFlLElBQUksRUFBRSxDQUFDO0FBQ3JDLFNBQUs7QUFDTCxJQUFFLENBQUM7QUFDSCxJQUNFLElBQUksQ0FBQyxJQUFVLEVBQUUsUUFBaUIsRUFBRSxRQUFpQixFQUFFLE1BQXlCO0FBQUksUUFDbEYsSUFBSSxDQUFDLElBQUksRUFBRTtBQUNmLFlBQU0sTUFBTSxJQUFJLEtBQUssQ0FBQyx5Q0FBeUMsQ0FBQyxDQUFDO0FBQ2pFLFNBQUs7QUFDTCxRQUNJLE1BQU0sSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsUUFBUSxJQUFJLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDN0YsUUFBSSxNQUFNLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxRQUFRLElBQUksVUFBVSxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDNUQsSUFBRSxDQUFDO0FBQ0gsSUFDRSxRQUFRLENBQUMsR0FBVyxFQUFFLFFBQWlCLEVBQUUsTUFBeUI7QUFBSSxRQUNwRSxNQUFNLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDakMsUUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQzVDLElBQUUsQ0FBQztBQUNILENBQUM7O2dLQUFBO0FBQ0Q7QUF6Q2EsZ0JBQWdCLG9CQUQ1QixVQUFVLENBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLENBQUMsSUFDdEIsZ0JBQWdCLENBd0M1Qjs7OzBCQUNEO0FBQUMsU0F6Q1ksZ0JBQWdCO0FBQzVCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgc2F2ZUFzLCBGaWxlU2F2ZXJPcHRpb25zIH0gZnJvbSAnZmlsZS1zYXZlcic7XG5cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXG5leHBvcnQgY2xhc3MgRmlsZVNhdmVyU2VydmljZSB7XG4gIGdldCBpc0ZpbGVTYXZlclN1cHBvcnRlZCgpOiBib29sZWFuIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuICEhbmV3IEJsb2IoKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgZ2VuVHlwZShmaWxlTmFtZT86IHN0cmluZyk6IHN0cmluZyB7XG4gICAgaWYgKCFmaWxlTmFtZSB8fCBmaWxlTmFtZS5sYXN0SW5kZXhPZignLicpID09PSAtMSkge1xuICAgICAgcmV0dXJuICd0ZXh0L3BsYWluJztcbiAgICB9XG4gICAgY29uc3QgdHlwZSA9IGZpbGVOYW1lLnN1YnN0cihmaWxlTmFtZS5sYXN0SW5kZXhPZignLicpICsgMSk7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlICd0eHQnOlxuICAgICAgICByZXR1cm4gJ3RleHQvcGxhaW4nO1xuICAgICAgY2FzZSAneG1sJzpcbiAgICAgIGNhc2UgJ2h0bWwnOlxuICAgICAgICByZXR1cm4gYHRleHQvJHt0eXBlfWA7XG4gICAgICBjYXNlICdqc29uJzpcbiAgICAgICAgcmV0dXJuICdvY3RldC9zdHJlYW0nO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGBhcHBsaWNhdGlvbi8ke3R5cGV9YDtcbiAgICB9XG4gIH1cblxuICBzYXZlKGJsb2I6IEJsb2IsIGZpbGVOYW1lPzogc3RyaW5nLCBmaWx0VHlwZT86IHN0cmluZywgb3B0aW9uPzogRmlsZVNhdmVyT3B0aW9ucyk6IHZvaWQge1xuICAgIGlmICghYmxvYikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdEYXRhIGFyZ3VtZW50IHNob3VsZCBiZSBhIGJsb2IgaW5zdGFuY2UnKTtcbiAgICB9XG5cbiAgICBjb25zdCBmaWxlID0gbmV3IEJsb2IoW2Jsb2JdLCB7IHR5cGU6IGZpbHRUeXBlIHx8IGJsb2IudHlwZSB8fCB0aGlzLmdlblR5cGUoZmlsZU5hbWUpIH0pO1xuICAgIHNhdmVBcyhmaWxlLCBkZWNvZGVVUkkoZmlsZU5hbWUgfHwgJ2Rvd25sb2FkJyksIG9wdGlvbik7XG4gIH1cblxuICBzYXZlVGV4dCh0eHQ6IHN0cmluZywgZmlsZU5hbWU/OiBzdHJpbmcsIG9wdGlvbj86IEZpbGVTYXZlck9wdGlvbnMpOiB2b2lkIHtcbiAgICBjb25zdCBibG9iID0gbmV3IEJsb2IoW3R4dF0pO1xuICAgIHRoaXMuc2F2ZShibG9iLCBmaWxlTmFtZSwgbnVsbCwgb3B0aW9uKTtcbiAgfVxufVxuIl19