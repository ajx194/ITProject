/**
 * @fileoverview added by tsickle
 * Generated from: lib/ng-image-slider.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
/** @type {?} */
import * as ɵngcc0 from '@angular/core';
var DESC = 'DESC';
/** @type {?} */
var ASC = 'ASC';
var NgImageSliderService = /** @class */ (function () {
    function NgImageSliderService() {
    }
    /**
     * @param {?} str
     * @return {?}
     */
    NgImageSliderService.prototype.isBase64 = /**
     * @param {?} str
     * @return {?}
     */
    function (str) {
        /** @type {?} */
        var base64regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;
        return base64regex.test(str);
    };
    /**
     * @param {?} str
     * @return {?}
     */
    NgImageSliderService.prototype.base64FileExtension = /**
     * @param {?} str
     * @return {?}
     */
    function (str) {
        return str.substring("data:image/".length, str.indexOf(";base64"));
    };
    /**
     * @param {?=} arr
     * @param {?=} orderType
     * @return {?}
     */
    NgImageSliderService.prototype.orderArray = /**
     * @param {?=} arr
     * @param {?=} orderType
     * @return {?}
     */
    function (arr, orderType) {
        if (arr === void 0) { arr = []; }
        if (orderType === void 0) { orderType = ASC; }
        if ((arr === null || arr === void 0 ? void 0 : arr.length) && orderType) {
            return arr.sort((/**
             * @param {?} ob1
             * @param {?} ob2
             * @return {?}
             */
            function (ob1, ob2) {
                if (ob1['order'] === null || !ob1['order']) {
                    return 1;
                }
                else if (ob2['order'] === null || !ob2['order']) {
                    return -1;
                }
                else if (ob1['order'] > ob2['order']) {
                    if (orderType === DESC) {
                        return -1;
                    }
                    else {
                        return 1;
                    }
                }
                else if (ob1['order'] < ob2['order']) {
                    if (orderType === DESC) {
                        return 1;
                    }
                    else {
                        return -1;
                    }
                }
            }));
        }
        return arr;
    };
    /** @nocollapse */
    NgImageSliderService.ctorParameters = function () { return []; };
NgImageSliderService.ɵfac = function NgImageSliderService_Factory(t) { return new (t || NgImageSliderService)(); };
NgImageSliderService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NgImageSliderService, factory: function (t) { return NgImageSliderService.ɵfac(t); } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgImageSliderService, [{
        type: Injectable
    }], function () { return []; }, null); })();
    return NgImageSliderService;
}());
export { NgImageSliderService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctaW1hZ2Utc2xpZGVyLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIm5nLWltYWdlLXNsaWRlci9saWIvbmctaW1hZ2Utc2xpZGVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDOztBQUNnQixJQUFWLElBQUksR0FBRyxNQUFNO0FBQ25CO0FBQ0EsSUFESSxHQUFHLEdBQUcsS0FBSztBQUVmO0FBR0ssSUFBRDtBQUVXLElBRkssQ0FBQztBQUNyQjtBQUNPO0FBQ0U7QUFBbUI7QUFBUSxJQURoQyx1Q0FBUTtBQUFPO0FBQ0U7QUFBbUI7QUFBUSxJQUQ1QyxVQUFTLEdBQUc7QUFDaEI7QUFBeUIsWUFBYixXQUFXLEdBQUcsa0VBQWtFO0FBQzVGLFFBQVEsT0FBTyxXQUFXLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3JDLElBQ0ksQ0FBQztBQUVMO0FBQVE7QUFBc0I7QUFDWjtBQUFRLElBRHRCLGtEQUFtQjtBQUFPO0FBQ1Q7QUFBbUI7QUFBUSxJQUQ1QyxVQUFvQixHQUFHO0FBQzNCLFFBQVEsT0FBTyxHQUFHLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO0FBQzNFLElBQUksQ0FBQztBQUVMO0FBQVE7QUFBdUI7QUFDZjtBQUFtQjtBQUNoQyxJQUZDLHlDQUFVO0FBQU87QUFDckI7QUFBNkI7QUFDckI7QUFBUSxJQUZaLFVBQVcsR0FBUSxFQUFFLFNBQWU7QUFDeEMsUUFEZSxvQkFBQSxFQUFBLFFBQVE7QUFBSSxRQUFGLDBCQUFBLEVBQUEsZUFBZTtBQUN4QyxRQUFRLElBQUksQ0FBQSxHQUFHLGFBQUgsR0FBRyx1QkFBSCxHQUFHLENBQUUsTUFBTSxLQUFJLFNBQVMsRUFBRTtBQUN0QyxZQUFZLE9BQU8sR0FBRyxDQUFDLElBQUk7QUFBTTtBQUNkO0FBQThCO0FBQ25DO0FBQ2QsWUFINEIsVUFBQyxHQUFHLEVBQUUsR0FBRztBQUFJLGdCQUN6QixJQUFJLEdBQUcsQ0FBQyxPQUFPLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUU7QUFDNUQsb0JBQW9CLE9BQU8sQ0FBQyxDQUFDO0FBQzdCLGlCQUFpQjtBQUNqQixxQkFBcUIsSUFBSSxHQUFHLENBQUMsT0FBTyxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFO0FBQ2pFLG9CQUFvQixPQUFPLENBQUMsQ0FBQyxDQUFDO0FBQzlCLGlCQUFpQjtBQUNqQixxQkFBcUIsSUFBSSxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFO0FBQ3RELG9CQUFvQixJQUFJLFNBQVMsS0FBSyxJQUFJLEVBQUU7QUFDNUMsd0JBQXdCLE9BQU8sQ0FBQyxDQUFDLENBQUM7QUFDbEMscUJBQXFCO0FBQUMseUJBQUs7QUFDM0Isd0JBQXdCLE9BQU8sQ0FBQyxDQUFDO0FBQ2pDLHFCQUFxQjtBQUNyQixpQkFBaUI7QUFDakIscUJBQXFCLElBQUksR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRTtBQUN0RCxvQkFDb0IsSUFBSSxTQUFTLEtBQUssSUFBSSxFQUFFO0FBQzVDLHdCQUF3QixPQUFPLENBQUMsQ0FBQztBQUNqQyxxQkFBcUI7QUFBQyx5QkFBSztBQUMzQix3QkFBd0IsT0FBTyxDQUFDLENBQUMsQ0FBQztBQUNsQyxxQkFBcUI7QUFDckIsaUJBQWlCO0FBQ2pCLFlBQVksQ0FBQyxFQUFDLENBQUM7QUFDZixTQUFTO0FBQ1QsUUFBUSxPQUFPLEdBQUcsQ0FBQztBQUNuQixJQUFJLENBQUMsQ0F6Q0M7QUFBQztpQ0FETixVQUFVLDNDQUNtQjs7Ozs7Z0RBS1g7QUFBQyxJQXFDcEIsMkJBQUM7QUFDQSxDQURBLEFBM0NELElBMkNDO0FBQ0QsU0EzQ2Esb0JBQW9CO0FBRWpDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5jb25zdCBERVNDID0gJ0RFU0MnLFxuICAgIEFTQyA9ICdBU0MnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTmdJbWFnZVNsaWRlclNlcnZpY2Uge1xuXG4gICAgY29uc3RydWN0b3IoKSB7IH1cblxuICAgIGlzQmFzZTY0KHN0cikge1xuICAgICAgICB2YXIgYmFzZTY0cmVnZXggPSAvXihbMC05YS16QS1aKy9dezR9KSooKFswLTlhLXpBLVorL117Mn09PSl8KFswLTlhLXpBLVorL117M309KSk/JC87XG4gICAgICAgIHJldHVybiBiYXNlNjRyZWdleC50ZXN0KHN0cik7XG5cbiAgICB9XG5cbiAgICBiYXNlNjRGaWxlRXh0ZW5zaW9uKHN0cikge1xuICAgICAgICByZXR1cm4gc3RyLnN1YnN0cmluZyhcImRhdGE6aW1hZ2UvXCIubGVuZ3RoLCBzdHIuaW5kZXhPZihcIjtiYXNlNjRcIikpO1xuICAgIH1cblxuICAgIG9yZGVyQXJyYXkoYXJyID0gW10sIG9yZGVyVHlwZSA9IEFTQykge1xuICAgICAgICBpZiAoYXJyPy5sZW5ndGggJiYgb3JkZXJUeXBlKSB7XG4gICAgICAgICAgICByZXR1cm4gYXJyLnNvcnQoKG9iMSwgb2IyKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKG9iMVsnb3JkZXInXSA9PT0gbnVsbCB8fCAhb2IxWydvcmRlciddKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChvYjJbJ29yZGVyJ10gPT09IG51bGwgfHwgIW9iMlsnb3JkZXInXSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKG9iMVsnb3JkZXInXSA+IG9iMlsnb3JkZXInXSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAob3JkZXJUeXBlID09PSBERVNDKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChvYjFbJ29yZGVyJ10gPCBvYjJbJ29yZGVyJ10pIHtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcmRlclR5cGUgPT09IERFU0MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFycjtcbiAgICB9XG59XG4iXX0=